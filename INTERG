#include <iostream>
#include <cmath>
using namespace std;


double func1(double x)
{
    return (6 * x) - 4;
}

double FUNC1(double x)
{
    return ((3 * pow(x, 2)) - (4 * x));
}


double func2(double x)
{
    return 1/(x+2);
}


double FUNC2(double x)
{
    return log(x + 2);
}

double iter1(double a, double b, double h, int n)
{
    double res = func1(a) / 2;
    double x;
    for (int i = 1; i < n; i++)
    {
        x = a + i * h;
        res += func1(x);
        
    }
    res = h * (res + func1(a + n * h) / 2);
    return res;
}

double iter2(double a, double b, double h, int n)
{
    double res, x;
    res = func2(a) / 2;
    for (int i = 1; i < n; i++)
    {
        x = a + i * h;
        res += func2(x);
    }
    res = h* (res + func2(a + n * h) / 2);
    return res;
}
int main()
{
    printf("Enter [1] to iter1 or [2] to iter 2: ");
    int s;
    cin >> s;
    
    int n = 10;
    double a, b, h, tz, x, res, sum, r, r1;
    if (s==1)
    {
        a = 1;
        b = 3;
        h = (b - a) / n;
        x = h / 2;
        tz = FUNC1(b) - FUNC1(a);
        res = iter1(a, b, h, n);
        sum = iter1(a, b, x, n*2);
      
        printf("exact = %f\tstep h = %f\tstep h/2 = %f\t", tz, res, sum);
        r = abs(tz - sum);
        r1 = (abs(res - sum) / 3);
    
        cout << endl;
        printf("Error estimation according to the Runge rule: ");
        cout << r << " and " << r1;
        
    }
    else
    {
        a = 0;
        b = 1;
        h = (b - a) / n;
        x = h / 2;
        tz =  FUNC2(b)-FUNC2(a);
        res = iter2(a, b, h, n);
        sum = iter2(a, b, x, n*2);
        printf("exact = %f\tstep h = %f\tstep h/2 = %f\t", tz, res, sum);
        r = abs(tz - sum);
        r1 = (abs(res - sum) / 3);
        cout << endl;
        printf("Error estimation according to the Runge rule:  ");
        cout << r << " and " << r1;
    }
    
    return 0;

}

