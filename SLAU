#include <iostream>
#include <math.h>

#include <cstdlib> 

#define EPSILON 0.0001
#define ITERATION_LIMIT 333

bool check_diagoanally_dominant(float** matrix, int matrix_size);
void solve_jacobi(float** matrix, int matrix_size, float* right_hand_side);
void delete_matrix(float** matrix, int matrix_size);
void init_array(float array[], int array_size);
float* clone_array(float array[], int array_length);


using namespace std;

int main() {
	int user_choice = 1;
	while (user_choice == 1)
	{
		int matrix_size;
		// Ввод кол-ва чисел в матрице
		printf("Enter the matrix size: ");
		scanf_s("%d", &matrix_size);

		// Выделение памяти под матрицы
		float** matrix = new float* [matrix_size];
		for (int i = 0; i < matrix_size; i++) matrix[i] = new float[matrix_size];
		float* right_hand_side = new float[matrix_size];

		// Ввод матрицы
		printf("Enter the matrix elements (Enter element by element and row by row from the matrix top left corner to its end by pressing ENTER):\n");
		for (int i = 0; i < matrix_size; i++) {
			printf("Row #%d elements:------\n", i);
			for (int j = 0; j < matrix_size; j++) {
				printf("Matrix[%d][%d]:\n", i, j);
				scanf_s("%f", &matrix[i][j]);
			}
		}

		// Вывод матрицы 
		printf("The matrix in its final shape: \n");
		for (int i = 0; i < matrix_size; i++) {
			for (int j = 0; j < matrix_size; j++) {
				printf("%f ", matrix[i][j]);
			}
			printf("\n");
		}

		// Проверка на диагональное преобладание
		if (!check_diagoanally_dominant(matrix, matrix_size)) {
			printf("The matrix is not dominant, please enter another matrix.\n");
			// Удаляем матрицу, если она нет диагонального преобладания
			delete_matrix(matrix, matrix_size);
			delete[] right_hand_side;
			printf("Do you want to continue? 1/0\n");
			scanf_s("%d", &user_choice);
			continue;
		}

		// Ввод вектора 
		printf("Enter the right hand side (it has a length of %d):\n", matrix_size);
		for (int i = 0; i < matrix_size; i++) {
			printf("Element #%d\n", i);
			scanf_s("%f", &right_hand_side[i]);
		}

		solve_jacobi(matrix, matrix_size, right_hand_side);
		delete_matrix(matrix, matrix_size);
		delete[] right_hand_side;

		printf("Do you want to continue? 1/0\n");
		scanf_s("%d", &user_choice);
	}


}

		bool check_diagoanally_dominant(float** matrix, int matrix_size) {
			int check_count = 0;
			// Для каждого ряда идёт суммирование элементов для првоерки на диагональное преобладание в последующем.
			for (int i = 0; i < matrix_size; i++) {
				float row_sum = 0;
				for (int j = 0; j < matrix_size; j++) {
					if (j != i) row_sum += fabs(matrix[i][j]);
				}

				if (fabs(matrix[i][i]) >= row_sum) {
					check_count++;
				}
			}
			return check_count == matrix_size;
		}
	



	void solve_jacobi(float** matrix, int matrix_size, float* right_hand_side) {
		float* solution = new float[matrix_size];
		float* last_iteration = new float[matrix_size];
		int count = 0;

		printf("Iterations:----------------------------------------- \n");
		init_array(solution, matrix_size);

		for (int i = 0; i < ITERATION_LIMIT; i++) {
			last_iteration = clone_array(solution, matrix_size);
			for (int j = 0; j < matrix_size; j++) {
				float sigma_value = 0;
				for (int k = 0; k < matrix_size; k++) {
					if (j != k) {
						sigma_value += matrix[j][k] * solution[k];
						count++;
					}
				}
				solution[j] = (right_hand_side[j] - sigma_value) / matrix[j][j];
			}

			// Проверка для точки останова
			int stopping_count = 0;
			for (int s = 0; s < matrix_size; s++) {
				if (abs(last_iteration[s] - solution[s]) <= EPSILON) {
					stopping_count++;
				}
			}

			if (stopping_count == matrix_size) break;

			printf("Iteration #%d: ", i + 1);
			for (int l = 0; l < matrix_size; l++) {
				printf("%f ", solution[l]);
			}
			printf("\n");
			printf("%d", count);
			printf("\n");
		}
	}


	void init_array(float array[], int array_size) {
		for (int i = 0; i < array_size; i++) {
			array[i] = 0;
		}
	}

	float* clone_array(float array[], int array_length) {
		float* output = new float[array_length];
		for (int i = 0; i < array_length; i++) {
			output[i] = array[i];
		}
		return output;
	}


	void delete_matrix(float** matrix, int matrix_size) {
		for (int i = 0; i < matrix_size; i++) {
			delete[] matrix[i];
		}
		delete[] matrix;
	}





/* Пример:
4

20.9 1.2 2.1 0.9 21.70
1.2 21.2 1.5 2.5 27.46
2.1 1.5 19.8 1.3 29.76
0.9 2.5 1.3 32.1 49.72
 */
